

   MEMBER('demo.clw')                                      ! This is a MEMBER module


   INCLUDE('ABTOOLBA.INC'),ONCE
   INCLUDE('ABWINDOW.INC'),ONCE
   INCLUDE('NetEmail.inc'),ONCE

                     MAP
                       INCLUDE('DEMO011.INC'),ONCE        !Local module procedure declarations
                     END


!!! <summary>
!!! Generated from procedure template - Window
!!! </summary>
SendEmail PROCEDURE (EmailParametersGroup pEmail)

SeeDetails           Long
hideNextOut          Long   
EmailFile            StringTheory
Loc:EmailFrom        string(256)
Ans                  LONG                                  !
Loc:Log              STRING(16384)                         !
Loc:Status           STRING(1024)                          !
EmailServer          STRING(255)                           !
EmailPort            LONG                                  !
EmailUser            STRING(255)                           !
EmailPassword        STRING(255)                           !
EmailHelo            STRING(255)                           !
EmailSSL             LONG                                  !
EmailStartTLS        LONG                                  !
EmailFrom            STRING(255)                           !
EmailTo              STRING(1024)                          !
EmailSubject         STRING(252)                           !
EmailCC              STRING(1024)                          !
EmailBCC             STRING(1024)                          !
EmailFileList        STRING(8192)                          !
EmailEmbedList       STRING(8192)                          !
EmailMessageText     STRING(16384)                         !
EmailMessageHTML     STRING(16384)                         !
EmailCaRoot          STRING(255)                           !
EmailReplyTo         STRING(255)                           !
EmailSSLMethod       LONG                                  !
EmailToken           STRING(4096)                          !
window               WINDOW('Sending Email'),AT(,,338,60),FONT('Segoe UI',10,,FONT:regular),DOUBLE,AUTO,GRAY,IMM, |
  SYSTEM
                       BUTTON('&Send'),AT(228,44,50,14),USE(?EmailSend),TIP('Send Email Now')
                       BUTTON('Details'),AT(8,44,50,14),USE(?DetailsBUTTON),LEFT,ICON('details.ico')
                       BUTTON('No Details'),AT(8,44,62,14),USE(?DetailsNoBUTTON),LEFT,ICON('detailsno.ico'),HIDE
                       TEXT,AT(9,68,319,150),USE(Loc:Log),HVSCROLL
                       BUTTON('Cancel'),AT(282,44,50,14),USE(?CancelButton)
                       TEXT,AT(9,8,322,32),USE(Loc:Status)
                     END

ThisWindow           CLASS(WindowManager)
Init                   PROCEDURE(),BYTE,PROC,DERIVED
Kill                   PROCEDURE(),BYTE,PROC,DERIVED
TakeAccepted           PROCEDURE(),BYTE,PROC,DERIVED
TakeEvent              PROCEDURE(),BYTE,PROC,DERIVED
TakeWindowEvent        PROCEDURE(),BYTE,PROC,DERIVED
                     END

Toolbar              ToolbarClass
!Local Data Classes
ThisSendEmail        CLASS(NetEmailSend)                   ! Generated by NetTalk Extension (Class Definition)
ErrorTrap              PROCEDURE(string errorStr,string functionName),DERIVED
MessageSent            PROCEDURE(),DERIVED
Process                PROCEDURE(),DERIVED
Send                   PROCEDURE(),DERIVED

                     END


  CODE
  GlobalResponse = ThisWindow.Run()                        ! Opens the window and starts an Accept Loop
  RETURN(Ans)

!---------------------------------------------------------------------------
DefineListboxStyle ROUTINE
!|
!| This routine create all the styles to be shared in this window
!| It`s called after the window open
!|
!---------------------------------------------------------------------------

ThisWindow.Init PROCEDURE

ReturnValue          BYTE,AUTO

  CODE
  GlobalErrors.SetProcedureName('SendEmail')
  SELF.Request = GlobalRequest                             ! Store the incoming request
  ReturnValue = PARENT.Init()
  IF ReturnValue THEN RETURN ReturnValue.
  SELF.FirstField = ?EmailSend
  SELF.VCRRequest &= VCRRequest
  SELF.Errors &= GlobalErrors                              ! Set this windows ErrorManager to the global ErrorManager
  SELF.AddItem(Toolbar)
  CLEAR(GlobalRequest)                                     ! Clear GlobalRequest after storing locally
  CLEAR(GlobalResponse)
  Relate:EmailLog.Open                                     ! File EmailLog used by this procedure, so make sure it's RelationManager is open
  Relate:EmailSettings.Open                                ! File EmailSettings used by this procedure, so make sure it's RelationManager is open
  SELF.FilesOpened = True
  set(emSet:KeyGuid)
  Access:EmailSettings.Next()
  SELF.Open(window)                                        ! Open window
                                               ! Generated by NetTalk Extension (Start)
  ThisSendEmail.SuppressErrorMsg = 1         ! No Object Generated Error Messages ! Generated by NetTalk Extension
  ThisSendEmail.init()
  if ThisSendEmail.error <> 0
    ! Put code in here to handle if the object does not initialise properly
  end
  ! Generated by NetTalk Extension
  ThisSendEmail.OptionsMimeTextTransferEncoding = '7bit'              ! '7bit', '8bit' or 'quoted-printable'
  ThisSendEmail.OptionsMimeHtmlTransferEncoding = 'quoted-printable'  ! '7bit', '8bit' or 'quoted-printable'
    If emSet:SSLMethod <> 0  ! not set so "use default". 0 is a valid option (NET:SSLMethodSSLv23), but not one that should ever be used.
      ThisSendEmail.SSLMethod = emSet:SSLMethod
    End
  Do DefineListboxStyle
  INIMgr.Fetch('SendEmail',window)                         ! Restore window settings from non-volatile store
  SELF.SetAlerts()
  Loc:Status = 'Sending...'
  post(Event:accepted,?EmailSend)    
  RETURN ReturnValue


ThisWindow.Kill PROCEDURE

ReturnValue          BYTE,AUTO

  CODE
  EmailFile.SetValue(loc:log)
  EmailFile.SaveFile('LastEmail.Log')  
  ThisSendEmail.Kill()                      ! Generated by NetTalk Extension
  ReturnValue = PARENT.Kill()
  IF ReturnValue THEN RETURN ReturnValue.
  IF SELF.FilesOpened
    Relate:EmailLog.Close
    Relate:EmailSettings.Close
  END
  IF SELF.Opened
    INIMgr.Update('SendEmail',window)                      ! Save window data to non-volatile store
  END
  GlobalErrors.SetProcedureName
  RETURN ReturnValue


ThisWindow.TakeAccepted PROCEDURE

ReturnValue          BYTE,AUTO

Looped BYTE
  CODE
  LOOP                                                     ! This method receive all EVENT:Accepted's
    IF Looped
      RETURN Level:Notify
    ELSE
      Looped = 1
    END
    CASE ACCEPTED()
    OF ?EmailSend
      disable(?EmailSend)      
      Ans = 1 ! Assume Fail       
    OF ?DetailsBUTTON
      unhide(?DetailsNoBUTTON)
      hide(?DetailsBUTTON)
      x# = 0{prop:height}
      0{prop:height} = x# + 160
      display()     
      SeeDetails = true      
    OF ?DetailsNoBUTTON
      hide(?DetailsNoBUTTON)
      unhide(?DetailsBUTTON)
      x# = 0{prop:height}
      0{prop:height} = x# - 160
      display()         
      SeeDetails = false      
    OF ?CancelButton
       Ans = 1 ! Assume Fail
       post(Event:closewindow)
    END
  ReturnValue = PARENT.TakeAccepted()
    CASE ACCEPTED()
    OF ?EmailSend      
  
      if pEmail.pEmailFrom
        loc:EmailFrom = pEmail.pEmailFrom
      Elsif Glo:UserEmail
        loc:EmailFrom = Glo:UserEmail ! email address of current logged in user
      ELSE
        loc:EmailFrom = emSet:FromAddress
      END 
      
  
      
      clear(emLog:record)
      emLog:Guid = EmailFile.MakeGuid()
      emLog:User = GLO:UserName            ! name of currently logged in user
      emLog:Date = today()
      emLog:Time = clock()
      emLog:ToEmail = pEmail.pEmailTo
      emLog:FromEmail = loc:EmailFrom
      emLog:Subject = pEmail.pEmailSubject
      emLog:CC = pEmail.pEmailCC
      emLog:BCC = pEmail.pEmailBCC
      emLog:Attachment = pEmail.pEmailFileList
      emLog:EmbedList = pEmail.pEmailEmbedList
      emLog:MessageText = pEmail.pEmailMessageText
      emLog:MessageHTML = pEmail.pEmailMessageHTML
      Access:EmailLog.Insert()      
    End    
    CASE ACCEPTED()
    OF ?EmailSend
      ThisWindow.Update()
      ! Generated by NetTalk Extension
      ThisSendEmail.Server = Choose(pEmail.pServer<>'',pEmail.pServer,emSet:EmailServer)
      ThisSendEmail.Port = Choose(pEmail.pPort<>0,pEmail.pPort,emSet:EmailPort)
      ThisSendEmail.AuthUser = Choose(pEmail.pSmtpUser<>'',pEmail.pSmtpUser,emSet:Username)
      ThisSendEmail.AuthPassword = Choose(pEmail.pPassword<>'',pEmail.pPassword,emSet:Password)
      ThisSendEmail.AuthToken = pEmail.pToken
      ThisSendEmail.Helo = pEmail.pHelo
      ThisSendEmail.SSL = emSet:AlwaysSSL
      ThisSendEmail.SecureEmailStartTLS = emSet:StartTLS
      If ThisSendEmail.SSL or ThisSendEmail.SecureEmailStartTLS
        ThisSendEmail.SSLCertificateOptions.CertificateFile = ''
        ThisSendEmail.SSLCertificateOptions.PrivateKeyFile = ''
        ThisSendEmail.SSLCertificateOptions.DontVerifyRemoteCertificateWithCARoot = 1
        ThisSendEmail.SSLCertificateOptions.DontVerifyRemoteCertificateCommonName = 1
        ThisSendEmail.SSLCertificateOptions.CARootFile = 'caroot.pem'
      End
      If ThisSendEmail.SecureEmailStartTLS
        ThisSendEmail.SSLCertificateOptions.DontVerifyRemoteCertificateCommonName = 1 ! Fudge this for now, as the certificate is not known when NetSimple does the CommonName check
      End
      ThisSendEmail.From = loc:EmailFrom
      ThisSendEmail.ReplyTo = pEmail.pEmailReplyTo
      ThisSendEmail.ToList = pEmail.pEmailTo
      ThisSendEmail.ccList = pEmail.pEmailCC
      ThisSendEmail.bccList = pEmail.pEmailBCC
      ThisSendEmail.Subject = pEmail.pEmailSubject
      ThisSendEmail.AttachmentList = pEmail.pEmailFileList
      ThisSendEmail.EmbedList = pEmail.pEmailEmbedList
      if ThisSendEmail.Error = 0
        ThisSendEmail.MessageTextST.SetValue(clip(pEmail.pEmailMessageText))
        if len(clip(pEmail.pEmailMessageHTML)) > 0
          ThisSendEmail.MessageHTMLST.SetValue(clip(pEmail.pEmailMessageHTML))
          ThisSendEmail.ProcessHTMLForImages('')
        end
        display()
        ThisSendEmail.SendMail(NET:EMailMadeFromPartsMode)
        display()
      end
    END
    RETURN ReturnValue
  END
  ReturnValue = Level:Fatal
  RETURN ReturnValue


ThisWindow.TakeEvent PROCEDURE

ReturnValue          BYTE,AUTO

Looped BYTE
  CODE
  LOOP                                                     ! This method receives all events
    IF Looped
      RETURN Level:Notify
    ELSE
      Looped = 1
    END
    ThisSendEmail.TakeEvent()                 ! Generated by NetTalk Extension
  ReturnValue = PARENT.TakeEvent()
    RETURN ReturnValue
  END
  ReturnValue = Level:Fatal
  RETURN ReturnValue


ThisWindow.TakeWindowEvent PROCEDURE

ReturnValue          BYTE,AUTO

Looped BYTE
  CODE
  LOOP                                                     ! This method receives all window specific events
    IF Looped
      RETURN Level:Notify
    ELSE
      Looped = 1
    END
    CASE EVENT()
    OF EVENT:CloseWindow
      ! Generated by NetTalk Extension
      if records (ThisSendEmail.DataQueue) > 0
        if Message ('The email is still being sent.|Are you sure you want to quit?','Email Sending',ICON:Question,BUTTON:Yes+BUTTON:No,BUTTON:No) = Button:No
          cycle
        end
      end
      ! Generated by NetTalk Extension
    END
  ReturnValue = PARENT.TakeWindowEvent()
    RETURN ReturnValue
  END
  ReturnValue = Level:Fatal
  RETURN ReturnValue


ThisSendEmail.ErrorTrap PROCEDURE(string errorStr,string functionName)


  CODE
   loc:status = 'Error: ' & errorStr
   Ans = 1 ! Failed      
   self.abort()
   enable(?EmailSend)      
  PARENT.ErrorTrap(errorStr,functionName)


ThisSendEmail.MessageSent PROCEDURE


  CODE
  loc:Status = 'Sent'
  Ans = 0 ! sent
  display()
  if SeeDetails = false
    post(Event:closewindow)    
  ELSE
    ?CancelButton{prop:text} = 'Close'
    ?CancelButton{PROP:Icon} = '~close.ico'
    enable(?EmailSend)
  end  
  emLog:SendDate = today()
  emLog:SendTime = clock()
  Access:EmailLog.Update()
  PARENT.MessageSent


ThisSendEmail.Process PROCEDURE


  CODE
  Loc:Log = clip(Loc:Log) & ' <<<< ' & clip(self.packet.bindata)
  if sub(self.packet.bindata,1,4) = '334 '
    hideNextOut = TRUE
  end   
  PARENT.Process


ThisSendEmail.Send PROCEDURE


  CODE
  if hideNextOut
    hideNextOut = false
    Loc:Log = clip(Loc:Log) & ' >> ***********<13,10>' 
  else  
    Loc:Log = clip(Loc:Log) & ' >> ' & clip(self.packet.bindata)  
  end   
  PARENT.Send

